name: Shorebird Release (Android, iOS)

on:
# manually trigger workflow
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - stg
          - prod

jobs:
  #######################
  # Initial Setup
  #######################
  setup: 
    runs-on: self-hosted
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v4

    - name: Setup Shorebird
      uses: shorebirdtech/setup-shorebird@v1

    - name: Clean and Get Flutter dependencies (Project)
      run: |
        flutter clean
        flutter pub get

    - name: Get dependencies using Melos 
      run: melos bootstrap

    - name: Setup Dart Defines
      run: echo "${{ secrets.DART_DEFINES }}" | base64 --decode > apps/geiger_toolbox/.env.${{ env.DEPLOY_ENV}}

    - name: Setup Firebase 
      env:
        FIREBASE_JSON: ${{ secrets.FIREBASE_JSON }}
        FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        GOOGLE_SERVICES_PLIST: ${{ secrets.GOOGLE_SERVICES_PLIST }}
      run: |
        echo "$FIREBASE_OPTIONS_DART" | base64 --decode > apps/geiger_toolbox/lib/firebase_options_${{ env.DEPLOY_ENV }}.dart
        echo "$GOOGLE_SERVICES_JSON" | base64 --decode > apps/geiger_toolbox/android/app/src/${{ env.DEPLOY_ENV }}/google-services.json
        mkdir -p apps/geiger_toolbox/ios/flavors/${{ env.DEPLOY_ENV }}
        echo "$GOOGLE_SERVICES_PLIST" | base64 --decode > apps/geiger_toolbox/ios/flavors/${{ env.DEPLOY_ENV }}/GoogleService-Info.plist
        echo "$FIREBASE_JSON" | base64 --decode > apps/geiger_toolbox/firebase.json
        dart pub global activate flutterfire_cli 1.0.1 --overwrite

    - name: Upload build files
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .env.${{ env.DEPLOY_ENV }}
          apps/geiger_toolbox/lib/firebase_options_${{ env.DEPLOY_ENV }}.dart
          apps/geiger_toolbox/android/app/src/${{ env.DEPLOY_ENV }}/google-services.json
          apps/geiger_toolbox/ios/flavors/${{ env.DEPLOY_ENV }}/GoogleService-Info.plist
          apps/geiger_toolbox/firebase.json


  #######################
  # Build Android 
  #######################
  build-android:
    needs:
      - setup
    runs-on: self-hosted
    timeout-minutes: 20
    defaults:
      run:
        working-directory: apps/geiger_toolbox
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps:
      - name: Download build files
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Setup Android Keystore
        env:
          ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/apps/geiger_toolbox/android/upload-keystore.jks
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEYSTORE_JKS: ${{ secrets.ANDROID_KEYSTORE_JKS }}
        run: |
          echo "$ANDROID_KEYSTORE_JKS" | base64 --decode > "$ANDROID_KEYSTORE_PATH"
          echo "storeFile=$ANDROID_KEYSTORE_PATH" > android/key.properties
          echo "storePassword=$ANDROID_KEYSTORE_PASSWORD" >> android/key.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties

      - name: Shorebird Android Release
        uses: shorebirdtech/shorebird-release@v0
        id: shorebird-android-release
        with:
          platform: android
          working-directory: ./apps/geiger_toolbox
          args: --flavor ${{ env.DEPLOY_ENV }} -t lib/main_${{ env.DEPLOY_ENV }}.dart --dart-define-from-file=.env.${{ env.DEPLOY_ENV }} --split-debug-info=build

      - name: Upload build artifacts (AAB, Symbols)
        uses: actions/upload-artifact@v4
        with:
          name: android-build-artifacts
          path: |
            apps/geiger_toolbox/build/app/outputs/bundle/${{ env.DEPLOY_ENV }}Release/app-${{ env.DEPLOY_ENV }}-release.aab
            apps/geiger_toolbox/build/app.android*.symbols


  #######################
  # Upload Android Artifacts to Google play
  #######################
  upload-android-playstore:
    if: github.event.inputs.environment == 'prod'
    needs:
      - build-android
    runs-on: self-hosted
    timeout-minutes: 20
    defaults:
      run:
        working-directory: apps/geiger_toolbox
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps:
      - name: Download Android Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-build-artifacts

      - name: Prepare for Upload
        run: |
          PACKAGE_NAME=$(grep -E "namespace\s*=\s*\"[^\"]+\"" android/app/build.gradle | sed -E 's/.*"([^"]+)".*/\1/')
          if [ "${{ env.DEPLOY_ENV }}" != "prod" ]; then
            PACKAGE_NAME="${PACKAGE_NAME}.${{ env.DEPLOY_ENV }}"
          fi
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "AAB_PATH=${{ github.workspace }}/apps/geiger_toolbox/build/app/outputs/bundle/${{ env.DEPLOY_ENV }}Release/app-${{ env.DEPLOY_ENV }}-release.aab" >> $GITHUB_ENV

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.PACKAGE_NAME }}
          releaseFiles: ${{ env.AAB_PATH }}
          inAppUpdatePriority: 3
          status: inProgress
          userFraction: 0.33
          changesNotSentForReview: true
          track: 'production'


  #######################
  # Build and Upload iOS App
  #######################

  #######################
  # Upload Debug Symbols to Sentry
  #######################
  upload-sentry:
    needs:
      - upload-android
    runs-on: self-hosted
    timeout-minutes: 20
    defaults:
      run:
        working-directory: apps/geiger_toolbox

    steps:
      - name: Download Android Debug Symbols
        uses: actions/download-artifact@v4
        with:
          name: android-build-artifacts

      - name: Upload Debug Symbols to Sentry
        run: dart run sentry_dart_plugin