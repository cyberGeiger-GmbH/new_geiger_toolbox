name: Build & Upload (Android, iOS)    

on: 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - stg
          - prod

jobs:
  #######################
  # Initial Setup
  ####################### 
  setup: # Setup the environment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        #* Reminder: enable caching on GitHub-hosted runners, disable on self-hosted runners
        cache: true
        cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
        cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
  # set up dependencies      
  setup-dependencies:
    needs: 
      - setup
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}
    steps:
    # - name: Run Flutter Doctor
    #   run: flutter doctor -v

    - name:  Get Flutter dependencies (Project)
      run: flutter pub get

    - name: Get Project Dependencies Using Melos 
      run: melos bs
  # setup env for .env files
  setup-env:
    needs: 
      - setup
      - setup-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps: 
    # Generate .env.<flavor> file as it is gitignored but needed for the build
    - name: Setup Dart Defines
      run: echo "${{ secrets.DART_DEFINES }}" | base64 --decode > .env.${{ env.DEPLOY_ENV}}
     
      # Write all the gitignored Firebase filtes that are needed for the build
    - name: Setup Firebase 
      env:
        FIREBASE_JSON: ${{ secrets.FIREBASE_JSON }}
        FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        GOOGLE_SERVICES_PLIST: ${{ secrets.GOOGLE_SERVICES_PLIST }}
      run: |
        echo "$FIREBASE_OPTIONS_DART" | base64 --decode > apps/geiger_toolbox/lib/firebase_options_${{ env.DEPLOY_ENV }}.dart
        echo "$GOOGLE_SERVICES_JSON" | base64 --decode > apps/geiger_toolbox/android/app/src/${{ env.DEPLOY_ENV }}/google-services.json
        mkdir -p apps/geiger_toolbox/ios/flavors/${{ env.DEPLOY_ENV }}
        echo "$GOOGLE_SERVICES_PLIST" | base64 --decode > apps/geiger_toolbox/ios/flavors/${{ env.DEPLOY_ENV }}/GoogleService-Info.plist
        echo "$FIREBASE_JSON" | base64 --decode > apps/geiger_toolbox/firebase.json
        # Needed by the "flutterfire bundle-service-file" build phase in Xcode
        dart pub global activate flutterfire_cli 1.0.1 --overwrite
      
    - name: Upload build files
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .env.${{ env.DEPLOY_ENV }}
          apps/geiger_toolbox/lib/firebase_options_${{ env.DEPLOY_ENV }}.dart
          apps/geiger_toolbox/android/app/src/${{ env.DEPLOY_ENV }}/google-services.json
          apps/geiger_toolbox/ios/flavors/${{ env.DEPLOY_ENV }}/GoogleService-Info.plist
          apps/geiger_toolbox/firebase.json

  #######################
  # Run tests
  #######################
  # run-tests:
  #   needs:
  #     - setup
  #   runs-on: self-hosted
  #   timeout-minutes: 20

  #   steps:
  #     - name: Run static analysis
  #       run: melos run analyze
  #     - name: Run tests
  #       run: melos run test

  #######################
  # Build & Upload Android App
  #######################
  build-android:
    needs:
      - setup
      - setup-dependencies
      - setup-env
      #- run-tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'prod' }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'prod' }}

    steps:
      - name: Download build files
        uses: actions/download-artifact@v4
        with:
          name: build-files
      # Generate all the files needed for android code signing
      - name: Setup Android Keystore
        env:
          ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/apps/geiger_toolbox/android/upload-keystore.jks
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEYSTORE_JKS: ${{ secrets.ANDROID_KEYSTORE_JKS }}
        run: |
          # Use > here to create or overwrite the file
          echo "$ANDROID_KEYSTORE_JKS" | base64 --decode > "$ANDROID_KEYSTORE_PATH"
          echo "storeFile=$ANDROID_KEYSTORE_PATH" > apps/geiger_toolbox/android/key.properties
          # Use >> here to append additional lines
          echo "storePassword=$ANDROID_KEYSTORE_PASSWORD" >> apps/geiger_toolbox/android/key.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> apps/geiger_toolbox/android/key.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> apps/geiger_toolbox/android/key.properties

      - name: Build Android App
        run: flutter build appbundle --flavor ${{ env.DEPLOY_ENV }} -t apps/geiger_toolbox/lib/main_${{ env.DEPLOY_ENV }}.dart --dart-define-from-file=.env.${{ env.DEPLOY_ENV }} --obfuscate --split-debug-info=apps/geiger_toolbox/build


      - name: Prepare for upload
        run: |
          PACKAGE_NAME=$(grep -E "namespace\s*=\s*\"[^\"]+\"" apps/geiger_toolbox/android/app/build.gradle | sed -E 's/.*"([^"]+)".*/\1/')
          if [ "${{ env.DEPLOY_ENV }}" != "prod" ]; then
            PACKAGE_NAME="${PACKAGE_NAME}.${{ env.DEPLOY_ENV }}"
          fi
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          echo "AAB_PATH=${{ github.workspace }}/apps/geiger_toolbox/build/app/outputs/bundle/${{ env.DEPLOY_ENV }}Release/app-${{ env.DEPLOY_ENV }}-release.aab" >> $GITHUB_ENV
      
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          # Note: First version should be updated manually in the Google Play Console
          # See: https://github.com/r0adkll/upload-google-play
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.PACKAGE_NAME }}
          releaseFiles: ${{ env.AAB_PATH }}
          track: 'production'
          releaseNotes: "Build: ${{ github.run_id }} - ${{ github.run_attempt }}"
      - name: Upload debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: debug-symbols-android
          path: |
            apps/geiger_toolbox/build/app.android*.symbols

  #######################
  # Build and Upload iOS App
  #######################

  #######################
  # Upload Debug Symbols to Sentry
  #######################
  upload-sentry:
    needs:
      - build-android
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Download Android Debug Symbols
      uses: actions/download-artifact@v4
      with:
        name: debug-symbols-android
    
    - name: Upload Debug Symbols to Sentry
      run: |
        cd apps/geiger_toolbox
        dart run sentry_dart_plugin 
         
  
          